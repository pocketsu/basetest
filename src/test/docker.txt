查看linux系统版本信息
cat /etc/os-release
========================================================
安装docker
centOS7以上
https://docs.docker.com/engine/install/centos/
1.卸载旧的版本
yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
2.需要的安装包
yum install -y yum-utils
3.设置镜像仓库
yum-config-manager \
    --add-repo \
    #https://download.docker.com/linux/centos/docker-ce.repo #这里用国内镜像仓库
	http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #阿里云镜像仓库
更新软件包索引
yum makecatch fast
4.安装docker  docker-ce社区版 ee企业版
yum install docker-ce docker-ce-cli containerd.io
5.启动docker
systemctl start docker
6.查看版本
docker version
7.测试hello world
docker run hello-world
若hello-world没有，则自动拉取这个镜像image
8.查看这个hello-world镜像
docker images

卸载docker
yum remove docker-ce docker-ce-cli containerd.io
rm -rf /var/lib/docker

=======================================================
docker run发生了什么
docker查找本地镜像--判断本地是否有这个镜像
--有就使用这个镜像，没有就去DockerHub上下载--DockerHub是否可以找到
--找不到返回错误，找到就下载这个镜像到本地--使用这个镜像
=======================================================
docker常用命令  https://docs.docker.com/engine/reference/commandline/docker/
docker version
docker info #显示docker系统信息，包括镜像和容器
docker 命令 --help
=======================================================
镜像命令
docker images #查看本地镜像
  REPOSITORY 镜像的仓库源
  TAG 镜像标签
  IMAGE ID 镜像id
  CREATED 镜像创建时间
  SIZE 镜像大小
docker images -aq #显示所有镜像id
docker search mysql  #搜索镜像
docker pull mysql  #下载镜像，下载版本latest（分层下载）
docker pull mysql:5.7 #下载指定版本
docker rmi -f 镜像id 镜像id 镜像id #删除多个镜像
docker rmi -f $(docker images -aq) #递归删除所有镜像
==========================================================
容器命令
有了镜像才可以创建容器，可以创建多个容器，用--name区分
docker pull centos #下载linux系统

docker run [可选参数] image
--name 容器名称
-d  后台方式运行
-it 使用交互方式运行，进入容器查看内容
-p  指定容器端口
    -p ip:主机端口:容器端口
    -p 主机端口:容器端口 （常用）
	-p 容器端口
-P  随机指定端口 

启动并进入容器
docker run -it centos /bin/bash

从容器退回主机
exit 直接容器停止并退出
Ctrl + P + Q  容器不停止退出

查看容器
docker ps
  -a 当前运行中的容器+历史运行过的容器
  -n=? 最近运行过的容器
  -q 只显示容器编号
  
删除容器
docker rm 容器id  #删除指定容器,不能删除正在运行的容器，如果强制删除则用rm -f
docker rm -f $(docker ps -aq) #删除所有容器

启动和停止容器操作
docker start 容器id  #启动容器
docker restart 容器id #重启
docker stop 容器id #停止正在运行的容器
docker kill 容器id #强制停止当前容器
==============================================================
常用其它命令
后台启动容器
docker run -d centos
当docker ps时发现centos停止了。容器使用后台运行，就必须要有一个前台进程。

docker run -d centos /bin/sh
显示日志
docker logs -tf [--tail 10] 容器id

查看容器进程信息
docker top 容器id

查看容器信息
docker inspect 容器id

进入当前正在运行的容器
docker exec -it 容器id /bin/bash  #进入容器后开启一个新的终端（常用）
docker attach 容器id  #进入容器正在执行的终端，不会启动新的进程

从容器拷贝文件到主机上
docker cp 容器id:容器文件路径 主机路径
例：docker cp 容器id:/home/test.java /home
================================================================
docker安装nginx
搜索镜像 search
下载镜像 docker pull nginx
docker run -d --name nginx01 -p 主机外部端口:容器内nginx端口 nginx #端口暴露

docker安装Tomcat
docker run -it --rm tomcat:9.0 #用于测试，用完即删
docker pull tomcat:9.0
docker run -d --name tomcat01 -p 主机外部端口:容器内tomcat端口 tomcat
=======================================================================
docker stats #查看CPU状态
增加内存限制启动elasticsearch
docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.6.2
=======================================================================
portainer可视化工具
docker run -d -p 8088:9000 \ 
--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer
访问测试 http://ip:8088
===================================================================
commit镜像
docker commit =m="提交的描述信息" -a="作者" 容器id 目标镜像名:[TAG]
=======================================================================
容器数据卷
docker run -it -v 主机目录:容器内目录
docker run -it -v /home/test:/home centos /bin/bash

挂载MySql
docker run -d -p 3310:3306 -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7
  -d 后台运行
  -p 端口映射
  -v 卷挂载
  -e 环境配置
  --name 容器名字
删除容器，挂载到主机的数据不丢失

匿名挂载
-v 容器内路径
docker run -d -P --name nginx01 -v /etc/nginx nginx

查看卷
docker volume ls

具名挂载
-v 卷名:容器内路径
docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx
查看具名挂载卷
docker volume inspect juming-nginx

所有docker容器内的卷，没有指定目录的情况下都在/var/lib/docker/volumes/卷名/_data

-v 容器内路径             #匿名挂载
-v 卷名:容器内路径        #具名挂载
-v /主机路径:/容器内路径  #指定路径

docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx
docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx
ro 只读,只能通过主机操作，容器内部无法操作
rw 可读可写
==============================================================================
DockerFile
通过脚本生成镜像
创建dockerfile文件
文件中的脚本内容（大写）
FROM centos
VOLUME ["volume1","volume2"]   #数据卷容器内目录，匿名挂载
CMD echo "----end-----"
CMD /bin/bash

执行这个脚本（命令最后有个点）
docker build -f /home/dockerfile01 -t centos:1.0 .
=======================================================================
容器内数据同步
docker run -it --name docker02 --volumes-from docker01 centos:1.0
--volumes-from 继承了父类
=====================================================================
Dockerfile构建命令
关键字字母大写
从上到下顺序执行
#表示注释
每个指令都是一个镜像层

Dockerfile指令
FROM        #基础镜像 centos
MAINTAINER  #镜像是谁写的，姓名+邮箱
RUN         #镜像构建的时候运行的命令
ADD         #比如添加tomcat镜像
WORKDIR     #镜像工作目录
VOLUME      #设置卷，挂载目录
EXPOSE      #暴露端口
CMD         #运行指定的命令，只有最后一个会生效，可被替代。run的时候写的命令会把脚本里的CMD命令替换
ENTRYPOINT  #运行指定的命令，可以追加命令。run的时候写的命令会追加到ENTRYPOINT后面
ONBUILD     #当构建一个被继承的Dockerfile，这时就会运行ONBUILD的指令，触发指令
COPY        #类似ADD，将文件拷贝到镜像中
ENV         #构建的时候设置环境变量
=================================================================
自己构建centos
DockerHub中99%的镜像都是从这个基础镜像过来的 FROM scratch

创建mydockerfile文件:
FROM centos
MAINTAINER user<user@126.com>
ENV MYPATH /usr/local
WORKDIR $MYPATH
RUN yum -y install vim
RUN yum -y install net-tools
EXPOSE 80
CMD echo $MYPATH
CMD echo "---end----"
CMD /bin/bash

构建
docker build -f mydockerfile文件路径 -t 镜像名:[TAG] .

查看镜像构建变更历史
docker history 镜像id
================================================================
自己构建tomcat

创建mydockerfile文件，官方推荐命名Dockerfile，build会自动寻找这个文件，就不需要-f指定路径了
FROM centos
MAINTAINER user<user@126.com>
COPY 文件 /usr/local/文件
ADD jdk-8u11-linux-x64.tar.gz /usr/local/   #ADD时会自动解压
ADD apache-tomcat-9.0.22.tar.gz /usr/local/
RUN yum -y install vim
ENV MYPATH /usr/local
WORKDIR $MYPATH
ENV JAVA_HOME /usr/local/jdk1.8.0_11
ENV CLASSPATH $JAVA_HOME/lib/dt.jar;$JAVA_HOME/lib/tools.jar
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.22
ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.22
ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin
EXPOSE 8080
CMD /usr/local/apache-tomcat-9.0.22/bin/startup.sh && tail -f /usr/local/apache-tomcat-9.0.22/logs/catalina.out

docker build -t 镜像名
=======================================================================
发布镜像到DockerHub
docker login -u 用户名 -p 密码
docker push 镜像名称:[TAG]
docker tag 镜像id 新名字:[TAG] #增加新的版本
========================================================================
docker网络
docker0 桥接，不支持容器名连接访问，只能通过ip
veth-pair技术

查看docker网络
docker network ls

docker互联 --link

自定义网络，网络连通
====================================================================
Docker Compose
Docker Swarm


