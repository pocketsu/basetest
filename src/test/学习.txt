~线程实现
集成Thread类
实现Runnable接口，重写run方法
实现Callable接口，重写call方法,需要返回值。ExecutorService线程池submit，Future类。FutureTask
=========================================================================
~静态代理模式
真实对象和代理对象都要实现同一个接口
代理对象要代理真实角色
=========================================================================
~Lamda表达式
函数式接口：只有一个抽象方法的接口
new Thread(new Runnable() {
	@Override
	public void run() {
		System.out.println("aaa");
	}
}).start();
等同于
new Thread(()->{
	System.out.println("bbb");
}).start();
=========================================================================
~线程状态
创建状态，就绪状态，阻塞状态，运行状态，死亡状态
thread.getState();
=========================================================================
~线程礼让
yield。CPU调度，礼让不一定成功
=========================================================================
~线程强制执行，线程插队
join合并线程，待此线程执行完成之后，在执行其它线程，其它线程阻塞
=========================================================================
~线程优先级
getPriority()
setPriority()
=========================================================================
~守护线程daemon
垃圾回收。守护线程会等待用户线程执行完毕后自动运行结束
thread.setDaemon(true);
=========================================================================
~synchronized
默认锁this类本身
synchronized(){}锁块
=======================================================================
Lock lock=new ReentrantLock()可重入锁
ReadWriteLock lock=new ReentrantReadWriteLock()读写锁，读锁和写锁分离
lock()
unlock()
手动开关，性能好

Synchronized 内置java关键字。Lock是java一个类
Synchronized 无法判断锁的状态。Lock可以判断是否获取到了锁
Synchronized 自动释放锁。Lock手动释放锁
Synchronized 可重入锁，不可中断，非公平。Lock可重入锁，是否公平可设置
===================================================================
~线程通信（生产者消费者）
wait() 线程一直等待，直到其它线程通知，与sleep不同，会释放锁
wait(long timeout) 制定等待的毫秒数
notify() 唤醒一个处于等待状态的线程
notifyAll() 唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度

线程等待 虚假唤醒 判断用while 不用if
===================================================================
wait() Object类，会释放锁，必须在同步代码块中（synchronized），不需要捕获异常
sleep() Thread类，不释放锁，可以任何地方使用，需要捕获异常
TimeUnit

Synchronized: wait() notify()
Lock:
Condition condition=lock.newCondition();
condition.await();
condition.signal();
精准唤醒，可以定义多个Condition
=============================================================================
公平锁：按顺序执行
非公平锁：可以插队（默认）
Lock lock=new ReentrantLock()可重入锁，锁里包含另一个锁
自旋锁：利用CAS实现
public class MySpinLock {
	AtomicReference<Thread> atomocReference=new AtomicReference<Thread>();
	//加锁
	public void myLock() {
		Thread thread=Thread.currentThread();
		System.out.println(Thread.currentThread()+"==>myLock");
		//自旋锁
		while(!atomocReference.compareAndSet(null, thread)) {
			
		}
	}
	//解锁
	public void myUnLock() {
		Thread thread=Thread.currentThread();
		System.out.println(Thread.currentThread()+"==>myUnLock");
		atomocReference.compareAndSet(thread, null);
	}
}
=====================================================================
~线程池:线程复用，可以控制并发数，管理线程
Executors 工具类
ExecutorService s=Executors.newFixedThreadPool(10);
ThreadPoolExecutor executor=new ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
					Executors.defaultThreadFactory(),new ThreadPoolExecutor.CallerRunsPolicy());
ThreadPoolExecutor四种拒绝策略
1.Abortpolicy() 队列满了，抛出异常
2.CallerRunsPolicy() 队列满了，执行原来的线程
3.DiscardPolicy() 队列满了，丢弃任务，不会抛出异常
4.DiscardOldestPolicy() 队列满了，尝试和最早的竞争，若竞争失败则丢弃任务，不会抛出异常
=============================================================================
CopyOnWriteArrayList
CopyOnWriteArraySet
ConcurrentHashMap
=============================================================================
CyclicBarrier 加法
Semaphore 信号量，限流。  acquire()得到 release()释放
=============================================================================
BlockingQueue阻塞队列 new ArrayBlockingQueue()
=====================================================================
~函数型接口
Function 一个入参，一个返回值
Predicate 一个入参，返回值是boolean
Consumer 一个入参，没有返回值
Supplier 没有入参，只有返回值
=========================================================================
~Stream流式计算
list.stream().filter(...).filter(...).map(...).forEach(System.out:println)...
============================================================================
~volatile
保证可见性 （某线程对主内存的变化是不知道的，加上volatile就能看见了）
不保证原子性
避免指令重排
==========================================================================
~单例模式
public class SingleTest {
	private SingleTest() {}
	private volatile static SingleTest singleTest;
	public static SingleTest getInstance() {
		if(singleTest==null) {
			synchronized (SingleTest.class) {
				if(singleTest==null) {
					singleTest=new SingleTest();
				}
			}
		}
		return singleTest;
	}
}
=========================================================================
CAS
比较当前工作中的值和主内存中的值，如果这个值是期望的，则执行操作。如果不是则循环（自旋锁）
compareAndSet
Unsafe操作内存
========================================================================
死锁排查：
jps -l
jstack 进程号
==============================================================================================================================================
~抽象类和接口有哪些区别？
抽象类中可以没有抽象方法。接口中的方法必须是抽象方法
抽象类中可以有普通的成员变量。接口中的变量必须是static final类型，必须被初始化，接口中只有常量，没有变量
抽象类只能单集成，接口可以继承多个父接口
java8中接口会有default方法
=======================================================================
~java常见集合
Map和Collection是所有集合的父接口
Map: HashMao,TreeMap,Hashtable,ConcurrentHashMap,Properties
Set:hashSet,TreeSet,LinkedHashSet
List:ArrayList,LinkedList,Stack,Vector
=======================================================================
HashMap和Hashtable区别
HashMap线程不同步，线程不安全。Hashtable使用了synchronized关键字，是线程安全的
HsshMap的key可以为null
=======================================================================
ConcurrentHashMap和Hashtable区别
ConcurrentHashMap结合了HashMap和Hashtable二者的优势。
Hashtable考虑了同步的问题，但每次同步执行时都要锁住整个结构(synchronized)。
ConcurrentHashMap的锁是更加细粒度的，将hash表分为16个桶，每次操作(get、put、remove)只锁当前需要用到的桶
=======================================================================
List和Set区别
List是有序的，可以重复。Set无序，去重。
=======================================================================
如何指定多个线程的执行顺序
线程通信
使用wait和notify，依次唤醒下一个线程，为了防止虚假唤醒，判断使用while
=======================================================================
线程和进程的区别
进程是一个“执行中的程序”
一个进程拥有一个或多个线程，线程之间共享地址空间和其它资源
=======================================================================
事务的四大特性
原子性：作为一个整体被执行，要么全部执行，要么全部不执行
一致性：保证数据库状态从一个一致状态转变为另一个一致状态
隔离性：多个事务并发执行，互不影响
持久性：一个事务一旦提交，对数据库的修改会永久保存
=======================================================================
事务并发问题
丢失更新
脏读
不可重复读
幻读
=======================================================================
事务的隔离级别
Read uncommitted
读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。
事例：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。
分析：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。
那怎么解决脏读呢？Read committed！读提交，能解决脏读问题。

Read committed
读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。
事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…
分析：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。
那怎么解决可能的不可重复读问题？Repeatable read ！

Repeatable read
可重复读，就是在开始读取数据（事务开启）时，不再允许修改操作
事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。
分析：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作。
什么时候会出现幻读？
事例：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。
那怎么解决幻读问题？Serializable！

Serializable 序列化
Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。
值得一提的是：大多数数据库默认的事务隔离级别是Read committed，比如Sql Server , Oracle。Mysql的默认隔离级别是Repeatable read。
=======================================================================
Spring 
IOC：控制反转，将对象间的依赖关系交给Spring容器，使用配置文件和注解创建依赖关系，由主动创建对象改为了被动方式，无需new
AOP：面向切面。前置通知，后置通知，环绕通知





















